// This is an example for Teensy 3.2 with one encoder connected as follows:
//   Pin  2 / PTD0 to Quadrature signal A
//   Pin 14 / PTD1 to Quadrature signal B
//   Pin  6 / PTD4 to Data signal Q

// Number of decoders to implement (up to 16)
#define QUADRATURE_COUNT 1

// Any fast method of obtaining the input data
// Each encoder is a pair of bits 0-1, 2-3, etc. where odd bits are A, even bits B
#define QUADRATURE_BITS (GPIOD_PDIR) // Lands in variable "qbit" when read
#define QUADRATURE_DATA (qbit >> 4)  // May use variable "qbit"

// Data lookup table
const uint8_t quadrature_lut[] = {
  0xF9, 0xFA, 0xFB, 0x13, 0xFC, 0x2C, 0x14, 0xC0, 0xFD, 0xD9, 0x2D, 0xE8, 0x15, 0x62, 0xC1, 0x45,
  0x5E, 0xFE, 0x08, 0xDA, 0x87, 0x2E, 0x7B, 0xE9, 0xBB, 0x16, 0xF2, 0x63, 0x02, 0xC2, 0x6B, 0x46,
  0x29, 0x5F, 0x84, 0xFF, 0x1B, 0x09, 0x1E, 0xDB, 0xD4, 0x88, 0x8D, 0x2F, 0x3F, 0x7C, 0x0C, 0xEA,
  0xBC, 0x77, 0x17, 0xAF, 0xF3, 0xB3, 0x64, 0x21, 0x03, 0x72, 0xC3, 0x94, 0x6C, 0xA0, 0x47, 0xDE,
  0xF7, 0x2A, 0xD7, 0x60, 0x5C, 0x85, 0xB9, 0x00, 0x82, 0x1C, 0x8B, 0x0A, 0xAD, 0x1F, 0x92, 0xDC,
  0xD5, 0xB7, 0x89, 0x90, 0x8E, 0xC8, 0x30, 0xCA, 0x40, 0x3A, 0x7D, 0x32, 0x0D, 0x56, 0xEB, 0xCC,
  0xBD, 0x42, 0x78, 0x68, 0x18, 0x3C, 0xB0, 0x9D, 0xF4, 0x7F, 0xB4, 0x37, 0x65, 0x34, 0x22, 0x4E,
  0x0F, 0x04, 0x25, 0x73, 0x58, 0xC4, 0x99, 0x95, 0xED, 0x6D, 0x51, 0xA1, 0xCE, 0x48, 0xA6, 0xDF,
  0xF8, 0x12, 0x2B, 0xBF, 0xD8, 0xE7, 0x61, 0x44, 0x5D, 0x07, 0x86, 0x7A, 0xBA, 0xF1, 0x01, 0x6A,
  0x28, 0x83, 0x1A, 0x1D, 0xD3, 0x8C, 0x3E, 0x0B, 0x76, 0xAE, 0xB2, 0x20, 0x71, 0x93, 0x9F, 0xDD,
  0xF6, 0xD6, 0x5B, 0xB8, 0x81, 0x8A, 0xAC, 0x91, 0xB6, 0x8F, 0xC7, 0xC9, 0x39, 0x31, 0x55, 0xCB,
  0x41, 0x67, 0x3B, 0x9C, 0x7E, 0x36, 0x33, 0x4D, 0x0E, 0x24, 0x57, 0x98, 0xEC, 0x50, 0xCD, 0xA5,
  0x11, 0xBE, 0xE6, 0x43, 0x06, 0x79, 0xF0, 0x69, 0x27, 0x19, 0xD2, 0x3D, 0x75, 0xB1, 0x70, 0x9E,
  0xF5, 0x5A, 0x80, 0xAB, 0xB5, 0xC6, 0x38, 0x54, 0x66, 0x9B, 0x35, 0x4C, 0x23, 0x97, 0x4F, 0xA4,
  0x10, 0xE5, 0x05, 0xEF, 0x26, 0xD1, 0x74, 0x6F, 0x59, 0xAA, 0xC5, 0x53, 0x9A, 0x4B, 0x96, 0xA3,
  0xE4, 0xEE, 0xD0, 0x6E, 0xA9, 0x52, 0x4A, 0xA2, 0xE3, 0xCF, 0xA8, 0x49, 0xE2, 0xA7, 0xE1, 0xE0
};

#define __INLINE __attribute__((always_inline)) inline

// Interrupt timer, Teensy style
IntervalTimer pit;

// Current quadrature count
int32_t quadrature_count[QUADRATURE_COUNT];

// Current quadrature state
// 16 MSB: Current direction
// 16 LSB: Position has been found
uint32_t quadrature_state;

// Parallel quadrature decoder with LFSR-based position finder
__attribute__((optimize("unroll-loops")))
static __INLINE
void decode_quadratures() {
  
  // Static locals
  bool static frun = true;
  uint32_t static qwas;
  struct {
    uint32_t data;
    int16_t lo, hi;
  } static qaux[QUADRATURE_COUNT] = {0, };
  
  // Locals
  uint32_t qbit = QUADRATURE_BITS;
  uint16_t data = QUADRATURE_DATA;
  
  if(frun && !(frun = false)) {
      
      // Initialize
      qwas = qbit;
      for(int id = 0; id < QUADRATURE_COUNT; id++) qaux[id].hi = -(qaux[id].lo = 1);
      
  } else {
      
      // Signal processing
      uint32_t xora = (qbit ^ (qwas >> 1)) & 0x55555555;
      uint32_t xorb = (qwas ^ (qbit >> 1)) & 0x55555555;
      uint32_t decoded = ((xora ^ xorb) << 1) | xora;
      uint32_t state = quadrature_state;
      for(int id = 0; id < QUADRATURE_COUNT; id++, decoded >>= 2) {
        if(decoded & 2) {
          if(!(decoded & 1) == !(state & (1 << (16 + id)))) {
              int32_t count = quadrature_count[id] + ((decoded & 1) ? -1 : +1);
              if(!(state & (1 << id))) {
                qaux[id].data |= ((data >> id) & 1) << (16 - count);
                if(count > qaux[id].hi) qaux[id].hi = count;
                if(count < qaux[id].lo) qaux[id].lo = count;
                if(2 << (qaux[id].hi - qaux[id].lo) == sizeof(quadrature_lut)) {
                  state |= (1 << id);
                  count = quadrature_lut[qaux[id].data >> 16 - qaux[id].hi] + count - qaux[id].lo + !(decoded & 1);
                }
              }
              quadrature_count[id] = count;
          } else {
              state ^= (1 << (16 + id));
          }
        }
      }
      quadrature_state = state;
      qwas = qbit;

  }
}

// Quadrature polling interrupt
void my_interrupt() {
  GPIOE_PSOR = 1 << 30; // Enables CPU use measurement by Oscilloscope
  decode_quadratures();
  GPIOE_PCOR = 1 << 30;
}

// System setup
void setup() {
  pinMode(26, OUTPUT);       // PTE1 = CPU usage
  pinMode( 2, INPUT_PULLUP); // PTD0 = A
  pinMode(14, INPUT_PULLUP); // PTD1 = B
  pinMode( 6, INPUT_PULLUP); // PTD4 = Q
  
  // Launch periodic interrupt at 100kHz
  pit.begin(my_interrupt, 10);

  // Enable serial output via USB
  Serial.begin(115200);
}

// Periodically print state to USB serial port
void loop() {
  delay(100);
  Serial.printf("%u %02X\n", quadrature_state & 1, quadrature_count[0] & 255);
}
